//@ skip if !$isSIMDPlatform

function F1(a3, a4) {
    if (!new.target) { throw 'must be called with new'; }
    const v5 = this.constructor;
    try { new v5("3p8", a4, v5, F1, F1); } catch (e) {}
    // (module
    //   (func $w0 (;0;) (export "w0") (param $var0 i32) (param $var1 i32) (param $var2 i32) (param $var3 i32) (param $var4 f64) (param $var5 f64) (param $var6 f32) (param $var7 i32) (result i32)
    //     (local $var8 v128)
    //     v128.const i32x4 0x52EF1C06 0x38CEE63F 0x537E8305 0x0B38B97D
    //     local.set $var8
    //     local.get $var2
    //   )
    // )
    const v18 = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
        0x00, 0x61, 0x73, 0x6D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0D,
        0x01, 0x60, 0x08, 0x7F, 0x7F, 0x7F, 0x7F, 0x7C, 0x7C, 0x7D,
        0x7F, 0x01, 0x7F, 0x03, 0x02, 0x01, 0x00, 0x04, 0x01, 0x00,
        0x05, 0x01, 0x00, 0x06, 0x01, 0x00, 0x07, 0x06, 0x01, 0x02,
        0x77, 0x30, 0x00, 0x00, 0x0A, 0x1C, 0x01, 0x1A, 0x01, 0x01,
        0x7B, 0xFD, 0x0C, 0x06, 0x1C, 0xEF, 0x52, 0x3F, 0xE6, 0xCE,
        0x38, 0x05, 0x83, 0x7E, 0x53, 0x7D, 0xB9, 0x38, 0x0B, 0x21,
        0x08, 0x20, 0x02, 0x0B,
    ])));
    const v20 = v18.exports.w0;
    const v21 = { toString: v20 };
    ("3p8").substring(v21);
}
try {
    new F1("3p8", "3p8");
} catch { }
